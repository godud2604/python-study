"""
- 리스트, 튜플, range, 문자열의 공통점 => 값이 연속적(sequence)으로 이어져 있다.
  => 연속적으로 이어진 자료형을 시퀀스 자료형(sequence types)라고 부른다.
- 시퀀스 자료형으로 만든 객체를 시퀀스 객체라고 하며, 시퀀스 객체에 들어있는 각 값을 요소(element)라고 부른다.
"""

# 특정 값이 있는지 확인
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]

print(30 in a) # True
print(100 not in a) # True

print(43 in (38, 76, 43, 62, 19))




# 시퀀스 객체 연결하기
a1 = [0, 10, 20, 30]
a2 = [9, 8, 7, 6]
print(a1 + a2) # [0, 10, 20, 30, 9, 8, 7, 6]

# 단, 시퀀스 자료형 중에서 range는 + 연산자로 객체를 연결할 수 없다.
# print(range(0, 10) + range(10, 20)) # TypeError: unsupported operand type(s) for +: 'range' and 'range'




# 시퀀스 객체 반복하기
print([0, 10, 20, 30] * 3)

# print(range(0, 5, 2) * 3) # TypeError: unsupported operand type(s) for *: 'range' and 'int'



# 인덱스 사용하기
# __getitem__ 메서드
# => 시퀀스 객체에서 [](대괄호)를 사용하면 실제로는 __getitem__ 메서드를 호출하여 요소를 가져옵니다.
# => 따라서 다음과 같이 __getitem__ 메서드를 직접 호출하여 요소를 가져올 수도 있습니다.

a = [38, 21, 53, 62, 19]
print(a.__getitem__(1))

r = range(0, 10, 2)
print(r)


# del로 요소 삭제
# => del 시퀀스객체[인덱스]
# => 리스트는 삭제 가능, 튜플은 요소 삭제 불가능, range와 문자열도 안에 저장된 요소 삭제 불가능



# 인덱스를 생략하면서 증가폭 사용하기
# 시퀀스객체[::증가폭]
a = [10, 20, 30, 40, 50, 60, 70, 80, 90]
print(a[::2]) # 리스트 전체에서 인덱스 0부터 2씩 증가시키면서 요소를 가져옴

print(a[::]) # 리스트 전체를 가져옴

print(a[5:1:-1]) # 인덱스 5부터 2까지 1씩 감소시키면서 요소를 가져온다.
print(a[::-1]) # 인덱스를 1씩 감소시키면서 요소를 가져오므로, 리스트를 반대로 뒤집는다.


# range객체[시작인덱스:끝인덱스]
# range객체[시작인덱스:끝인덱스:인덱스증가폭]
r = range(10)
print(r[:7:2])
print(list(r[:7:2]))



# slice 객체 사용하기
"""
• 슬라이스객체 = slice(끝인덱스)
• 슬라이스객체 = slice(시작인덱스, 끝인덱스)
• 슬라이스객체 = slice(시작인덱스, 끝인덱스, 인덱스증가폭) 
• 시퀀스객체[슬라이스객체]
• 시퀀스객체.__getitem__(슬라이스객체)
"""
print(range(10)[slice(4, 7, 2)]) # range(4, 7, 2)
print(range(10).__getitem__(slice(4, 7, 2))) # range(4, 7, 2)